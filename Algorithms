1. Analysis of algorithms:
 --> Recurrences: https://www.geeksforgeeks.org/analysis-algorithm-set-4-master-method-solving-recurrences/
 --> Amortized analysis: https://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/
 --> https://www.geeksforgeeks.org/polynomial-time-approximation-scheme/
 --> MIT lecture : https://www.youtube.com/watch?v=JPyuH4qXLZ0&list=PL8B24C31197EC371C
 
 2. Searching:
--> Interpolation search: https://www.geeksforgeeks.org/interpolation-search/
--> Binary vs Ternary search (WHY NOT TERNARY? # COMPARISONS ?)
-->Interesting article on BINARY search: https://www.geeksforgeeks.org/the-ubiquitous-binary-search-set-1/

3. Sorting:
--> Stability: https://www.geeksforgeeks.org/stability-in-sorting-algorithms/
--> Amazing:https: //www.geeksforgeeks.org/radix-sort/
--. Binary Insertion Sort: https://www.geeksforgeeks.org/binary-insertion-sort/
--> Merge vs Quick: https://www.geeksforgeeks.org/quick-sort-vs-merge-sort/


4. Greedy ALgo:
--> Job sequencing using disjoint set.
--> Greedy will not work for all dinominations, so when skeptic choose dynamic programming:
   https://www.geeksforgeeks.org/greedy-algorithm-to-find-minimum-number-of-coins/
--> Efficient huffman encoding:
   https://www.geeksforgeeks.org/efficient-huffman-coding-for-sorted-input-greedy-algo-4/

5. String algo's:
--> Next permutation implementation.

6. Backtracking:
--> Warnsdroff algo: https://www.geeksforgeeks.org/warnsdorffs-algorithm-knights-tour-problem/
--> Major diff Rec vs Backtrack: https://see.stanford.edu/materials/icspacs106b/H19-RecBacktrackExamples.pdf

7. Divide an Conquer:
--> Closest [air of points: https://www.geeksforgeeks.org/closest-pair-of-points-using-divide-and-conquer-algorithm/
--> Egg drop: https://www.geeksforgeeks.org/egg-dropping-puzzle-dp-11/

8. Dynamic Programming:
--> Coin change in O(n) space: https://www.geeksforgeeks.org/coin-change-dp-7/
--> Absolute answer: https://www.geeksforgeeks.org/egg-dropping-puzzle-with-2-eggs-and-k-floors/


